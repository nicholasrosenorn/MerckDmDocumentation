[
["creating-a-connection-between-api-endpoints.html", "Chapter 6 Creating a connection between API Endpoints 6.1 List of API end-points: 6.2 What framework we are going to use? 6.3 Setting up SQL database connection: 6.4 Design of the Routes", " Chapter 6 Creating a connection between API Endpoints 6.1 List of API end-points: Front-End Patient User input to the database Biometric Data from the FitBit API to the database Data from the database to the RShiny Dashboard for visualization 6.2 What framework we are going to use? We are currently looking to use the framework Express.js to write the routes between the database and various API endpoints. Express is a fast, light-weight web framework for Node.js. Express is a pretty good framework. It’s the most popular node application framework out there. Express is widely used as middleware in node apps as it helps to organize your app into a MVC architecture. It’s the E of the popular MEAN stack. Express manages following things very easily: Routing = Sessions HTTP requests Error handling At times writing code from scratch for above things can be time consuming. But by using express it’s only a matter of few methods. Express also helps in organizing your code. Link to set up Node 6.3 Setting up SQL database connection: We created a connection with the MariaDB database in our Node Rest API server to be able to send and receive data. The following link shows a tutorial on how we set up the connection. Link to setup SQL connection in Node 6.4 Design of the Routes There are five kinds of routes: GET: The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. POST: The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database. PUT: The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI. DELETE: The DELETE method deletes the specified resource. PATCH: The PATCH method applies partial modifications to a resource "]
]
